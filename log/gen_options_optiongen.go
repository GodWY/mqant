// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package log

var _ = OptionsOptionDeclareWithDefault()

type Options struct {
	debug       bool
	processId   string
	service     string
	logDir      string
	logSettings map[string]interface{}
	biDir       string
	biSettings  map[string]interface{}
	useBi       bool
	useLog      bool
}

func (cc *Options) SetOption(opt Option) {
	_ = opt(cc)
}

func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *Options) GetSetOption(opt Option) Option {
	return opt(cc)
}

type Option func(cc *Options) Option

func WithDebug(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.debug
		cc.debug = v
		return WithDebug(previous)
	}
}

func WithProcessId(v string) Option {
	return func(cc *Options) Option {
		previous := cc.processId
		cc.processId = v
		return WithProcessId(previous)
	}
}

func WithService(v string) Option {
	return func(cc *Options) Option {
		previous := cc.service
		cc.service = v
		return WithService(previous)
	}
}

func WithLogDir(v string) Option {
	return func(cc *Options) Option {
		previous := cc.logDir
		cc.logDir = v
		return WithLogDir(previous)
	}
}

func WithLogSettings(v map[string]interface{}) Option {
	return func(cc *Options) Option {
		previous := cc.logSettings
		cc.logSettings = v
		return WithLogSettings(previous)
	}
}

func WithBiDir(v string) Option {
	return func(cc *Options) Option {
		previous := cc.biDir
		cc.biDir = v
		return WithBiDir(previous)
	}
}

func WithBiSettings(v map[string]interface{}) Option {
	return func(cc *Options) Option {
		previous := cc.biSettings
		cc.biSettings = v
		return WithBiSettings(previous)
	}
}

func WithUseBi(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.useBi
		cc.useBi = v
		return WithUseBi(previous)
	}
}

func WithUseLog(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.useLog
		cc.useLog = v
		return WithUseLog(previous)
	}
}

func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

func InstallOptionsWatchDog(dog func(cc *Options)) {
	watchDogOptions = dog
}

var watchDogOptions func(cc *Options)

func newDefaultOptions() *Options {

	cc := &Options{}

	for _, opt := range [...]Option{
		WithDebug(false),
		WithProcessId(""),
		WithService("mqant"),
		WithLogDir(""),
		WithLogSettings(nil),
		WithBiDir(""),
		WithBiSettings(nil),
		WithUseBi(true),
		WithUseLog(true),
	} {
		_ = opt(cc)
	}

	return cc
}
